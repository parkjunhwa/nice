'use client'

import { useEffect, useRef } from 'react'
import { TabulatorFull as Tabulator } from 'tabulator-tables'
import '@/components/table/table-common.scss'

interface TabulatorTableProps {
  data?: any[]
  columns?: any[]
  height?: string | number
  className?: string
  onAction?: (action: string, rowData: any) => void
}

export default function TabulatorTable({
  className = '',
  height = 300,
  data,
  columns,
  onAction
}: TabulatorTableProps) {
  const tableRef = useRef<HTMLDivElement>(null)
  const tabulatorRef = useRef<Tabulator | null>(null)

  // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞
  const sampleData = [
    {
      id: 1, name: 'ÍπÄÏ≤†Ïàò', email: 'kim@example.com', phone: '010-1234-5678',
      address: 'ÏÑúÏö∏Ïãú Í∞ïÎÇ®Íµ¨ ÌÖåÌó§ÎûÄÎ°ú 123', age: 30, department: 'Í∞úÎ∞úÌåÄ',
      position: 'ÏãúÎãàÏñ¥ Í∞úÎ∞úÏûê', salary: 8000000, joinDate: '2020-01-15',
      status: 'ÌôúÏÑ±', project: 'ÏõπÏÇ¨Ïù¥Ìä∏ Î¶¨Îâ¥Ïñº', manager: 'Î∞ïÏòÅÌù¨',
      location: 'ÏÑúÏö∏', skills: 'React, TypeScript, Node.js', experience: '5ÎÖÑ',
      education: 'Ïª¥Ìì®ÌÑ∞Í≥µÌïô ÌïôÏÇ¨', certification: 'AWS Solutions Architect',
      language: 'ÏòÅÏñ¥, ÏùºÎ≥∏Ïñ¥', lastLogin: '2024-01-15 09:30:00'
    },
    {
      id: 2, name: 'Ïù¥ÏòÅÌù¨', email: 'lee@example.com', phone: '010-2345-6789',
      address: 'ÏÑúÏö∏Ïãú ÏÑúÏ¥àÍµ¨ ÏÑúÏ¥àÎåÄÎ°ú 456', age: 28, department: 'ÎîîÏûêÏù∏ÌåÄ',
      position: 'UI/UX ÎîîÏûêÏù¥ÎÑà', salary: 6500000, joinDate: '2021-03-20',
      status: 'ÌôúÏÑ±', project: 'Î™®Î∞îÏùº Ïï± ÎîîÏûêÏù∏', manager: 'ÏµúÎØºÏàò',
      location: 'ÏÑúÏö∏', skills: 'Figma, Adobe XD, Sketch', experience: '3ÎÖÑ',
      education: 'ÏãúÍ∞ÅÎîîÏûêÏù∏ ÌïôÏÇ¨', certification: 'Adobe Certified Expert',
      language: 'ÏòÅÏñ¥', lastLogin: '2024-01-15 08:45:00'
    },
    {
      id: 3, name: 'Î∞ïÎØºÏàò', email: 'park@example.com', phone: '010-3456-7890',
      address: 'Í≤ΩÍ∏∞ÎèÑ ÏÑ±ÎÇ®Ïãú Î∂ÑÎãπÍµ¨ ÌåêÍµêÏó≠Î°ú 789', age: 35, department: 'Í∏∞ÌöçÌåÄ',
      position: 'ÌîÑÎ°úÎçïÌä∏ Îß§ÎãàÏ†Ä', salary: 9000000, joinDate: '2019-07-10',
      status: 'ÌôúÏÑ±', project: 'Ïã†Í∑ú ÏÑúÎπÑÏä§ Í∏∞Ìöç', manager: 'Ï†ïÏàòÏßÑ',
      location: 'Í≤ΩÍ∏∞', skills: 'Product Management, Analytics', experience: '7ÎÖÑ',
      education: 'Í≤ΩÏòÅÌïô ÏÑùÏÇ¨', certification: 'PMP',
      language: 'ÏòÅÏñ¥, Ï§ëÍµ≠Ïñ¥', lastLogin: '2024-01-15 10:15:00'
    },
    {
      id: 4, name: 'ÏµúÏàòÏßÑ', email: 'choi@example.com', phone: '010-4567-8901',
      address: 'Ïù∏Ï≤úÏãú Ïó∞ÏàòÍµ¨ Ïª®Î≤§ÏãúÏïÑÎåÄÎ°ú 321', age: 32, department: 'ÎßàÏºÄÌåÖÌåÄ',
      position: 'ÎßàÏºÄÌåÖ Îß§ÎãàÏ†Ä', salary: 7500000, joinDate: '2020-09-05',
      status: 'ÌôúÏÑ±', project: 'Î∏åÎûúÎìú Ï∫†ÌéòÏù∏', manager: 'ÍπÄÎåÄÌëú',
      location: 'Ïù∏Ï≤ú', skills: 'Digital Marketing, SEO', experience: '6ÎÖÑ',
      education: 'Í¥ëÍ≥†ÌôçÎ≥¥Ìïô ÌïôÏÇ¨', certification: 'Google Analytics',
      language: 'ÏòÅÏñ¥, Ïä§ÌéòÏù∏Ïñ¥', lastLogin: '2024-01-15 11:20:00'
    },
    {
      id: 5, name: 'Ï†ïÎåÄÌëú', email: 'jung@example.com', phone: '010-5678-9012',
      address: 'Î∂ÄÏÇ∞Ïãú Ìï¥Ïö¥ÎåÄÍµ¨ ÏÑºÌÖÄÏ§ëÏïôÎ°ú 654', age: 40, department: 'Í≤ΩÏòÅÏßÑ',
      position: 'ÎåÄÌëúÏù¥ÏÇ¨', salary: 15000000, joinDate: '2018-01-01',
      status: 'ÌôúÏÑ±', project: 'Ï†ÑÏ≤¥ Í≤ΩÏòÅ', manager: 'Ïù¥ÏÇ¨Ìöå',
      location: 'Î∂ÄÏÇ∞', skills: 'Leadership, Strategy', experience: '12ÎÖÑ',
      education: 'Í≤ΩÏòÅÌïô Î∞ïÏÇ¨', certification: 'CEO Ïù∏Ï¶ù',
      language: 'ÏòÅÏñ¥, ÏùºÎ≥∏Ïñ¥, Ï§ëÍµ≠Ïñ¥', lastLogin: '2024-01-15 07:00:00'
    }
  ]

  // ÏÉòÌîå Ïª¨Îüº Ï†ïÏùò
  const sampleColumns = [
    { title: 'ID', field: 'id', width: 60, headerSort: true, headerSortTristate: true },
    { title: 'Ïù¥Î¶Ñ', field: 'name', width: 100, headerSort: true, headerSortTristate: true },
    { title: 'Ïù¥Î©îÏùº', field: 'email', width: 180, headerSort: true, headerSortTristate: true },
    { title: 'Ï†ÑÌôîÎ≤àÌò∏', field: 'phone', width: 130, headerSort: true, headerSortTristate: true },
    { title: 'Ï£ºÏÜå', field: 'address', width: 200, headerSort: true, headerSortTristate: true },
    { title: 'ÎÇòÏù¥', field: 'age', width: 60, headerSort: true, headerSortTristate: true },
    { title: 'Î∂ÄÏÑú', field: 'department', width: 100, headerSort: true, headerSortTristate: true },
    { title: 'ÏßÅÍ∏â', field: 'position', width: 120, headerSort: true, headerSortTristate: true },
    { 
      title: 'Ïó∞Î¥â', field: 'salary', width: 100, headerSort: true, headerSortTristate: true,
      formatter: (cell: any) => new Intl.NumberFormat('ko-KR').format(cell.getValue()) + 'Ïõê'
    },
    { title: 'ÏûÖÏÇ¨Ïùº', field: 'joinDate', width: 100, headerSort: true, headerSortTristate: true },
    { title: 'ÏÉÅÌÉú', field: 'status', width: 80, headerSort: true, headerSortTristate: true },
    { title: 'ÌîÑÎ°úÏ†ùÌä∏', field: 'project', width: 150, headerSort: true, headerSortTristate: true },
    { title: 'ÏÉÅÍ∏âÏûê', field: 'manager', width: 100, headerSort: true, headerSortTristate: true },
    { title: 'Í∑ºÎ¨¥ÏßÄ', field: 'location', width: 80, headerSort: true, headerSortTristate: true },
    { title: 'Í∏∞Ïà†Ïä§ÌÉù', field: 'skills', width: 200, headerSort: true, headerSortTristate: true },
    { title: 'Í≤ΩÎ†•', field: 'experience', width: 80, headerSort: true, headerSortTristate: true },
    { title: 'ÌïôÎ†•', field: 'education', width: 120, headerSort: true, headerSortTristate: true },
    { title: 'ÏûêÍ≤©Ï¶ù', field: 'certification', width: 150, headerSort: true, headerSortTristate: true },
    { title: 'Ïñ∏Ïñ¥', field: 'language', width: 120, headerSort: true, headerSortTristate: true },
    { title: 'ÎßàÏßÄÎßâ Î°úÍ∑∏Ïù∏', field: 'lastLogin', width: 150, headerSort: true, headerSortTristate: true },
    {
      title: 'Ïï°ÏÖò', field: 'actions', width: 120, headerSort: false,
      formatter: () => `
        <div class="action-buttons">
          <button class="action-btn view-btn" title="Î≥¥Í∏∞">üëÅ</button>
          <button class="action-btn edit-btn" title="Ìé∏Ïßë">‚úèÔ∏è</button>
          <button class="action-btn delete-btn" title="ÏÇ≠Ï†ú">üóëÔ∏è</button>
        </div>
      `
    }
  ]

  useEffect(() => {
    if (!tableRef.current) return

    if (tabulatorRef.current) {
      tabulatorRef.current.destroy()
    }

    tabulatorRef.current = new Tabulator(tableRef.current, {
      data: data || sampleData,
      columns: columns || sampleColumns,
      height: height,
      layout: 'fitColumns',
      headerVisible: true,
      scrollToColumnIfVisible: true,
      scrollToColumnPosition: 'left',
      sortMode: 'local',
      initialSort: [{ column: 'id', dir: 'asc' }],
      pagination: true,
      paginationMode: 'local',
      paginationSize: 10,
      paginationSizeSelector: [5, 10, 20, 50],
      paginationCounter: 'rows',
      paginationElement: '<div class="pagination-wrapper"></div>',
      paginationAddRow: 'page',
      rowFormatter: (row: any) => {
        const element = row.getElement()
        element.style.transition = 'all 0.2s ease'
        if (row.getPosition() % 2 === 0) {
          element.style.backgroundColor = '#f9fafb'
        }
      }
    })

    // ÌÖåÏù¥Î∏îÏù¥ ÏôÑÏÑ±Îêú ÌõÑ Ïä§ÌÅ¨Î°§ ÎèôÍ∏∞Ìôî ÏÑ§Ï†ï
    tabulatorRef.current.on('tableBuilt', () => {
      const tableElement = tableRef.current
      if (!tableElement) return

      const headerElement = tableElement.querySelector('.tabulator-header')
      const tableholderElement = tableElement.querySelector('.tabulator-tableholder')
      
      if (headerElement && tableholderElement) {
        const syncScroll = () => {
          const scrollLeft = tableholderElement.scrollLeft
          headerElement.scrollLeft = scrollLeft
        }
        tableholderElement.addEventListener('scroll', syncScroll)
      }
    })

    const handleActionClick = (e: Event) => {
      const target = e.target as HTMLElement
      const button = target.closest('.action-btn')
      if (!button) return

      const row = button.closest('.tabulator-row')
      if (!row) return

      const rowData = tabulatorRef.current?.getRowFromElement(row)?.getData()
      if (!rowData) return

      if (button.classList.contains('view-btn')) {
        onAction?.('view', rowData)
      } else if (button.classList.contains('edit-btn')) {
        onAction?.('edit', rowData)
      } else if (button.classList.contains('delete-btn')) {
        if (confirm(`Ï†ïÎßêÎ°ú ${rowData.name}ÏùÑ(Î•º) ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`)) {
          tabulatorRef.current?.deleteRow(rowData.id)
        }
      }
    }

    tableRef.current.addEventListener('click', handleActionClick)

    return () => {
      if (tabulatorRef.current) {
        tabulatorRef.current.destroy()
        tabulatorRef.current = null
      }
      if (tableRef.current) {
        tableRef.current.removeEventListener('click', handleActionClick)
      }
    }
  }, [data, columns, height, onAction])

  return (
    <div className={`tabulator-table ${className}`}>
      <div ref={tableRef} style={{ width: '100%', height: '100%' }} />
    </div>
  )
}